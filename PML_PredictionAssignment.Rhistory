data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength,p=3/4)[[1]]
training <- concrete[inTrain,]
testing <- concrete[-inTrain,]
set.seed(325)
library(e1071)
svmfit <- svm(CompressiveStrength~.,data=training)
svmPred <- predict(svm,newdata=testing)
svmPred <- predict(svmfit,newdata=testing)
accuracy(svmPred,testing$CompressiveStrength)
confusionMatrix(svmPred,testing$CompressiveStrength)
svPred
svmPred
table(svmPred,testing$CompressiveStrength)
confusionMatrix(svmPred,testing$CompressiveStrength)
accuracy(svmPred,testing$CompressiveStrength)
names(svmfit)
svmfit$residuals
svmfit
sqrt(mean(svmfit$residuals^2))
library(forecast)
library(lubridate)
data <- read.csv("/Users/HimanshuBharara/Downloads/gaData.csv")
training <- dat[year(dat$date)==2011,]
dat <- read.csv("/Users/HimanshuBharara/Downloads/gaData.csv")
training <- dat[year(dat$date)==2011,]
tstrain <- ts(training$visitsTumblr)
testing <- dat[year(dat$date)>2011,]
tstest <- ts(testing$visitsTumblr)
modBats <- bats(tstrain)
pred <- forecast(modBats,h=length(testing$visitsTumblr),level=c(80,95))
accuracy <- 1-sum(testing$visitsTumblr>pred$upper[,2])/length(testing$visitsTumblr)
accuracy
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis,p=3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
set.seed(62433)
rfpred <- train(diagnosis~.,data=testing,method="rf")
rfpred <- train(diagnosis~.,data=training,method="rf")
gbmpred <- traing(diagnosis~.,data=training,method="gbm",verbose=FALSE)
gbmpred <- train(diagnosis~.,data=training,method="gbm",verbose=FALSE)
ldapred <- train(diagnosis~.,data=training,method="lda")
pred1 <- predict(rfpred,newdata=testing)
pred2 <- predict(gbmpred,newdata=testing)
pred3 <- predict)ldapred,newdata=testing
pred3 <- predict)ldapred,newdata=testing)
pred3 <- predict())ldapred,newdata=testing)
pred3 <- predict(ldapred,newdata=testing)
comb <- data.frame(pred1,pred2,pred3,diagnosis,testing$diagnosis)
comb <- data.frame(pred1,pred2,pred3,testing$diagnosis)
trcomb <- train(diagnosis~.,data=comb,method="rf")
length(pred1)
length(pred2)
length(pred3)
length(testing$diagnosis)
head(comb)
trcomb <- train(testing$diagnosis~.,data=comb,method="rf")
combpred <- predict(trcomb,newdata=comb)
sqrt(sum((as.numeric(rfPred)-as.numeric(testing$diagnosis))^2))
sqrt(sum((as.numeric(rfpred)-as.numeric(testing$diagnosis))^2))
sqrt(sum((as.numeric(pred1)-as.numeric(testing$diagnosis))^2))
sqrt(sum((as.numeric(pred2)-as.numeric(testing$diagnosis))^2))
sqrt(sum((as.numeric(pred3)-as.numeric(testing$diagnosis))^2))
sqrt(sum((as.numeric(combpred)-as.numeric(testing$diagnosis))^2))
confusionMatrix(testing$diagnosis,pred1)
confusionMatrix(testing$diagnosis,pred2)
confusionMatrix(testing$diagnosis,pred3)
confusionMatrix(testing$diagnosis,combpred)
library(caret)
library(ggplot2)
df <- read.table("/Users/HimanshuBharara/Desktop/WealthFront Opportunities/loan_data.txt",header = TRUE,sep=",")
str(df)
names(df)
data_set <- df[,-c(27,28,24,25)]
names(data_set)
str(data_set)
df1 <- subset(data_set,df$status_ind==c(1,2))
df1$mths_since_last_delinq[df$mths_since_last_delinq=='NA'] <- 0
df1$mths_since_last_delinq[df$mths_since_last_delinq=="NA"] <- 0
df1$mths_since_last_delinq[df1$mths_since_last_delinq=="NA"] <- 0
str(df1)
head(df1)
df1$mths_since_last_delinq[df1$mths_since_last_delinq=='NA'] <- 0
head(df1)
head(df1)
str(df1)
df1$mths_since_last_delinq[as.character(df1$mths_since_last_delinq)=='NA'] <- 0
head(df1)
library(plyr)
revalue(df1$mths_since_last_delinq,c("NA"=0))
revalue(as.character(df1$mths_since_last_delinq),c("NA"=0))
revalue(as.character(df1$mths_since_last_delinq),c("NA"==0))
df1$mths_since_last_delinq[df1$mths_since_last_delinq=='NA'] <- 0
summary(df1)
table(df1)
table(df1$mths_since_last_delinq)
length(table(df1$mths_since_last_delinq))
str(df1)
table(df1$mths_since_last_delinq)
length(df1$mths_since_last_delinq=="NA")
length(df1$mths_since_last_delinq=="")
length(df1$mths_since_last_delinq==" ")
length(df1)
length(df1$id)
table(df1$term)
names(df1)
inTrain <- createDataPartition(df1$status_ind,p=0.7,list=FALSE)
training <- df1[inTrain,]
testing <- df1[-inTrain,]
nrow(training)
nrow(testing)
table(training$status_ind)
table(testing$status_ind)
str(training)
names(training)
cor(training[,c(2,3,5,6,9,13,14,16,18,19,20,21,22,23)])
m <- abs(cor(training[,c(2,3,5,6,9,13,14,16,18,19,20,21,22,23)]))
diag(m) <- 0
which(m > 0.8,arr.ind = T)
prComp <- prcomp(training[,c(2,3,5,6,9,13,14,16,18,19,20,21,22,23)])
prComp <- prcomp(training[,c(2,3,5,6,9,13,14,18,19,20,21,22,23)])
names(prComp)
prComp
prComp$rotation
modFit <- train(training$status_ind~.,data=training,method="glm",preProcess="pca")
names(training)
modFit <- train(training$status_ind~loan_amnt,funded_amnt+term+int_rate+installment+emp_length+home_ownership+annual_inc+dti+delinq_2yrs+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int,data=training,method="glm",preProcess="pca")
modFit <- train(training$status_ind~loan_amnt,funded_amnt+term+int_rate+installment+emp_length+home_ownership+annual_inc+dti+delinq_2yrs+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int,data=training,method="glm")
modFit <- train(training$status_ind~loan_amnt,funded_amnt+term+int_rate+installment+emp_length+home_ownership+annual_inc+dti+delinq_2yrs+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int,data=training,method="glm",family="binomial")
names(status_ind)
table(training$status_ind)
training$status_ind[training$status_ind==2] <- 0
table(training$status_ind)
modFit <- train(training$status_ind~loan_amnt,funded_amnt+term+int_rate+installment+emp_length+home_ownership+annual_inc+dti+delinq_2yrs+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int,data=training,method="glm",family="binomial")
training$status_ind <- as.factor(training$status_ind)
modFit <- train(training$status_ind~loan_amnt,funded_amnt+term+int_rate+installment+emp_length+home_ownership+annual_inc+dti+delinq_2yrs+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int,data=training,method="glm",family="binomial")
modFit <- train(training$status_ind~loan_amnt+funded_amnt+term+int_rate+installment+emp_length+home_ownership+annual_inc+dti+delinq_2yrs+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int,data=training,method="glm",family="binomial")
names(modFit)
modFit$method
modFit$results
modFit$modelInfo
names(modFit)
modFit$pred
modFit <- train(status_ind~loan_amnt+funded_amnt+term+int_rate+installment+emp_length+home_ownership+annual_inc+dti+delinq_2yrs+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int,data=training,method="glm")
warnings()
modFit <- train(status_ind~loan_amnt+funded_amnt+term+int_rate+installment+emp_length+home_ownership+annual_inc+dti+delinq_2yrs+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int,data=training,method="glm",preProcess="pca")
modFit <- train(status_ind~loan_amnt+funded_amnt+term+int_rate+installment+annual_inc+dti+delinq_2yrs+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int,data=training,method="glm",preProcess="pca")
modFit
names(modFit)
modFit$pred
modFit <- train(status_ind~loan_amnt+funded_amnt+int_rate+installment+annual_inc+dti+delinq_2yrs+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int,data=training,method="glm")
modFit$pred
modFit <- train(status_ind~loan_amnt+funded_amnt,data=training,method="glm")
warnings()
modFit$pred
modFit <- train(status_ind~loan_amnt+funded_amnt+int_rate+installment+annual_inc+dti+delinq_2yrs+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int,data=training,method="rpart")
print(modFit$finalModel)
modFit <- train(status_ind~.,method="rpart",data=training)
names(training)
qplot(training$delinq_2yrs,col=training$status_ind)
plot(training$delinq_2yrs,col=training$status_ind)
plot(training$delinq_2yrstraining$status_ind)
plot(training$delinq_2yrs,training$status_ind)
plot(training$delinq_2yrs,training$status_ind,xlab="Delinq in Last 2 Years",ylab="Loan Status")
abline(h=4)
qplot(training$delinq_2yrs,training$status_ind,xlab="Delinq in Last 2 Years",ylab="Loan Status")
abline(h=4)
qplot(training$delinq_2yrs,training$status_ind,xlab="Delinq in Last 2 Years",ylab="Loan Status")
library(ggplot2)
library(caret)
qplot(training$delinq_2yrs,training$status_ind,xlab="Delinq in Last 2 Years",ylab="Loan Status")
names(training)
qplot(training$revol_bal,training$status_ind,xlab="Delinq in Last 2 Years",ylab="Loan Status")
qplot(training$total_acc,training$status_ind,xlab="Delinq in Last 2 Years",ylab="Loan Status")
qplot(training$dti,training$status_ind,xlab="Delinq in Last 2 Years",ylab="Loan Status")
qplot(training$dti,training$total_acc,xlab="Delinq in Last 2 Years",ylab="Loan Status",col=training$status_ind)
qplot(training$open_acc,training$status_ind,xlab="Delinq in Last 2 Years",ylab="Loan Status")
qplot(training$status_ind,training$open_acc,xlab="Delinq in Last 2 Years",ylab="Loan Status")
qplot(training$status_ind,training$open_acc)
qplot(training$status_ind,training$purpose)
qplot(training$status_ind,training$annual_inc)
qplot(training$status_ind,training$funded_amnt)
qplot(training$status_ind,training$dti)
qplot(training$status_ind,training$emp_length
)
table(training$emp_length,training$status_ind)
table(training$purpose,training$status_ind)
table(training$purpose,training$home_ownership,training$status_ind)
table(training$purpose,training$home_ownership)
table(training$status_ind,training$home_ownership)
table(training$status_ind,training$earliest_cr_line)
names(training)
table(training$status_ind,training$revol_bal)
names(training)
qplot(training$status_ind,training$revol_bal)
qplot(training$dti,training$revol_bal,col=training$status_ind)
qplot(training$annual_inc,training$revol_bal,col=training$status_ind)
summary(training)
qplot(training$annual_inc,training$revol_bal,col=training$status_ind)
qplot(training$annual_inc,training$revol_bal,col=training$status_ind,xlab="Annual Income",ylab="Revolving Balance")
qplot(training$annual_inc,training$revol_bal,col=training$status_ind,xlab="Annual Income",ylab="Revolving Balance",main="Annual Income - Rev. Balance (Color-Loan Status")
qplot(training$annual_inc,training$revol_bal,col=training$status_ind,xlab="Annual Income",ylab="Revolving Balance",main="Annual Income - Rev. Balance (Color-Loan Status)")
qplot(training$term,training$status_ind)
qplot(training$term,training$status_ind,xlab="Term of Loan",ylab="Loan Status",main="Loan Term V/s Loan Status")
qplot(training$out_prncp,training$annual_inc,col=training$status_ind,xlab="Term of Loan",ylab="Loan Status",main="Loan Term V/s Loan Status")
qplot(training$out_prncp,training$annual_inc,col=training$status_ind,xlab="Annual Income",ylab="Outstanding Principal",main="Outstanding Principal V/s Annual Income",legend="Loan Status")
qplot(training$out_prncp,training$annual_inc,col=training$status_ind,xlab="Annual Income",ylab="Outstanding Principal",main="Outstanding Principal V/s Annual Income")
qplot(training$out_prncp,training$annual_inc,col=training$status_ind,ylab="Annual Income",xlab="Outstanding Principal",main="Outstanding Principal V/s Annual Income")
names(training)
qplot(training$mths_since_last_delinq,training$open_acc,col=training$status_ind,ylab="Annual Income",xlab="Outstanding Principal",main="Outstanding Principal V/s Annual Income")
qplot(training$mths_since_last_delinq,training$open_acc,col=training$status_ind,ylab="Open Accounts",xlab="Months Since Last Delinquency",main="Open Accounts V/s Months Since Last Delq")
qplot(training$int_rate,training$status_ind)
qplot(training$int_rate,training$status_ind,xlab="Interest Rate",ylab="Loan Status",main="Loan Status V/s Interest Rate")
qplot(training$revol_bal,training$open_acc,col=training$status_ind)
qplot(training$revol_bal,training$annual_inc,col=training$status_ind)
qplot(training$revol_bal,training$annual_inc,col=training$status_ind,xlab="Revolving Balance",ylab="Annual Income",main="Annual Income v/s Revolving Balance")
df <- read.table("/Users/HimanshuBharara/Desktop/WealthFront Opportunities/loan_data.txt",header=TRUE,sep=",")
names(df)
df1 <- df[,-c(1,27,28,24,25,26,27,28,29)]
head(df1)
df1 <- df[,-c(1,15,27,28,24,25,26,27,28,29)]
df1 <- df[,-c(1,10,15,27,28,24,25,26,27,28,29)]
head(df1)
table(training$addr_state,training$status_ind)
df1 <- df[,-c(1,10,15,27,28,24,25,26,27,28,29)]
df1 <- subset(df1,df1$status_ind==c(1,2))
df1$status_ind <- as.factor(df1$status_ind)
table(df1$status_ind)
df <- read.table("/Users/HimanshuBharara/Desktop/WealthFront Opportunities/loan_data.txt",header=TRUE,sep=",")
nrow(df)
df1 <- df[,-c(1,10,15,27,28,24,25,26,27,28,29)]
nrow(df1)
df1 <- subset(df1,df$status_ind==c(1,2))
nrow(df1)
df <- read.table("/Users/HimanshuBharara/Desktop/WealthFront Opportunities/loan_data.txt",header=TRUE,sep=",")
df1 <- subset(df1,df1$status_ind==c(1,2))
nrow(df1)
df <- read.table("/Users/HimanshuBharara/Desktop/WealthFront Opportunities/loan_data.txt",header=TRUE,sep=",")
df1 <- df[,-c(1,10,15,27,28,24,25,26,27,28,29)]
df1 <- subset(df1,df1$status_ind==c(1,2))
nrow(df1)
df <- read.table("/Users/HimanshuBharara/Desktop/WealthFront Opportunities/loan_data.txt",header=TRUE,sep=",")
nrow(df1)
nrow(df)
df1 <- subset(df,df$status_ind==c(1,2))
nrow(df1)
nrow(df)
df1 <- subset(df,df$status_ind==1)
nrow(df1)
df1 <- subset(df,df$status_ind==c(1,2))
nrow(df1)
df1 <- subset(df,df$status_ind==c(1))
df1 <- subset(df,df$status_ind==c(2))
nrow(df1)
df <- read.table("/Users/HimanshuBharara/Desktop/WealthFront Opportunities/loan_data.txt",header=TRUE,sep=",")
nrow(df)
df1 <- df[,-c(1,10,15,27,28,24,25,26,27,28,29)]
nrow(df1)
df1$status_ind <- as.factor(df1$status_ind)
nrow(df1)
inTrain <- createDataPartition(df1$status_ind,p=0.7,list=FALSE)
training <- df1[inTrain,]
testing <- df1[-inTrain,]
nrow(training)
nrow(testing)
table(training$status_ind)
names(training)
modFit <- train(training$status_ind~loan_amnt,funded_amnt,installment,annual_inc,emp_length,method="rf",prox=TRUE)
modFit <- train(training$status_ind~loan_amnt,funded_amnt,installment,annual_inc,emp_length,method="rf",prox=TRUE,data=training)
modFit <- train(training$status_ind~loan_amnt,installment,annual_inc,emp_length,method="rf",prox=TRUE,data=training)
names(training)
modFit <- train(training$status_ind~loan_amnt+funded_amnt+dti+open_acc+revol_bal+total_pymnt+yr_since_earliest_line+installment+annual_inc+emp_length,method="rf",prox=TRUE,data=training)
modFit <- train(training$status_ind~funded_amnt+dti+open_acc+revol_bal+total_pymnt+yr_since_earliest_line+installment+annual_inc+emp_length,method="gbm",verbose=FALSE,data=training)
plot(modFit)
summary(modFit)
par(mfrow=c(1,2))
plot(modFit,i='annual_inc')
plot(modFit,i=1)
plot(modFit)
names(training)
modFit <- train(training$status_ind~.,method="gbm",verbose=FALSE,data=training)
warnings()
summary(modFit)
names(df)
df1 <- df[,-c(1,10,12,15,27,28,24,25,26,27,28,29)]
df1$status_ind <- as.factor(df1$status_ind)
inTrain <- createDataPartition(df1$status_ind,p=0.7,list=FALSE)
training <- df1[inTrain,]
testing <- df1[-inTrain,]
names(training)
modFit <- train(training$status_ind~-c("purpose","home_ownership","emp_length"),method="gbm",verbose=FALSE,data=training)
modFit <- train(training$status_ind~-c(6,7,9),method="gbm",verbose=FALSE,data=training)
modFit <- train(training$status_ind~training[,-c(6,7,9)],method="gbm",verbose=FALSE,data=training)
names(df)
names(training)
modFit <- train(training$status_ind~loan_amnt+funded_amnt+term+int_rate+installment+annual_inc+dti+delinq_2yr+mths_since_last_delinq+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int+yr_since_earliest_line,method="gbm",data=training,verbose=FALSE)
modFit <- train(training$status_ind~loan_amnt+funded_amnt+term+int_rate+installment+annual_inc+dti+delinq_2yrs+mths_since_last_delinq+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int+yr_since_earliest_line,method="gbm",data=training,verbose=FALSE)
summary(modFit)
par(mfrow=c(1,1))
modFit <- train(training$status_ind~loan_amnt+funded_amnt+term+int_rate+installment+annual_inc+dti+delinq_2yrs+mths_since_last_delinq+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int+yr_since_earliest_line,method="gbm",data=training,verbose=FALSE)
plot(modFit)
summary(modFit)
plot(modFit,i='dti')
plot(modFit,i=1)
names(modFit)
modFit$preProcess
modFit$finalModel
modFit$results
modFit$pred
modFit$modelInfo
names(modFit)
names(results)
modFit$results
modFit1 <- train(training$status_ind~loan_amnt+funded_amnt+term+int_rate+installment+annual_inc+dti+delinq_2yrs+mths_since_last_delinq+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int+yr_since_earliest_line,method="gbm",data=training,verbose=FALSE)
modFit2 <- train(training$status_ind~loan_amnt+funded_amnt+term+int_rate+installment+annual_inc+dti+delinq_2yrs+mths_since_last_delinq+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int+yr_since_earliest_line,method="bstTree",data=training,verbose=FALSE)
warnings()
modFit2 <- train(training$status_ind~loan_amnt+funded_amnt+term+int_rate+installment+annual_inc+dti+delinq_2yrs+mths_since_last_delinq+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int+yr_since_earliest_line,method="bstTree",data=training,na.remove=TRUE)
modFit2 <- train(training$status_ind~loan_amnt+funded_amnt+term+int_rate+installment+annual_inc+dti+delinq_2yrs+mths_since_last_delinq+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int+yr_since_earliest_line,method="rf",trControl=trainControl(method="cv",number=3),data=training,na.remove=TRUE)
summary(modFit2)
plot(modFit2)
varImp(modFit2)
confusionMatrix(predict(modFit2,newdata=testing),testing$status_ind)
predict(modFit2,newdata=testing)
length(predict(modFit2,newdata=testing))
length(predict(modFit1,newdata=testing))
length(testing$status_ind)
plot(modFit2$finalModel)
plot(varImp(modFit2),top=10)
plot(modFit1,plotType="level")
resampleHist((modFit1))
missmap(training)
library(Amelia)
missmap(training)
missmap(training,cex=0.4)
missmap(training,cex=10)
modFit0 <- train(training$status_ind~loan_amnt+funded_amnt+term+int_rate+installment+annual_inc+dti+delinq_2yrs+mths_since_last_delinq+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int+yr_since_earliest_line,method="rpart",data=training)
library(rattle)
fancyRpartPlot(modFit0$finalModel)
modFit0
plot(modFit0)
names(modFit0)
pred0<- predict(modFit0,testing)
confusionMatrix(pred0,testing$status_ind)
confusionMatrix(pred0,as.factor(testing$status_ind))
length(pred0)
length(testing$status_ind)
fancyRpartPlot(mod0$finalModel)
fancyRpartPlot(modFit0$finalModel)
pred1 <- predict(modFit2,newdata=testing)
length(pred1)
pred1 <- predict(modFit2,newdata=testing,na.rm=TRUE)
nrow(pred1)
pred1 <- predict(modFit2,newdata=testing)
nrow(pred1)
pred2 <- predict(modFit2,newdata=testing)
length(pred2)
plot(modFit2)
plot(modFit2$finalModel)
plot(varImp(modFit2))
pred1 <- predict(modFit1,newdata=testing)
pred1
length(pred1)
names(pred1)
confusionMatrix(pred1,pred2)
pred2$overall
plot(modFit1)
plot(modFit1,plotType="level")
resampleHist(modFit1)
modFit3 <- train(training$status_ind~loan_amnt+funded_amnt+term+int_rate+installment+annual_inc+dti+delinq_2yrs+mths_since_last_delinq+open_acc+revol_bal+total_acc+out_prncp+total_pymnt+total_rec_prncp+total_rec_int+yr_since_earliest_line,method="treebag",data=training)
warnings()
plot(modFit3)
varImp(modFit3)
plot(varImp(modFit3),top=10)
pred3<- predict(modFit3,newdata=testing)
pred3
length(3)
length(pred3)
names(modFit1)
modFit1$method
modFit1$call
modFit1$dots
modFit1$results
confusionMatrix(pred1,testing$status_ind)
table(pred1,testing$status_ind)
table(testing$status_ind)
table(pred1)
table(pred2)
table(pred3)
table(pred0)
numeric_cols <- sapply(df1, is.numeric)
df.lng <- melt(df[,numeric_cols],id="is_bad")
library(stringr)
library(plyr)
library(lubridate)
library(randomForest)
library(reshape2)
library(ggplot2)
df.lng <- melt(df[,numeric_cols],id="is_bad")
df.lng <- melt(df[,numeric_cols],id="status_ind")
df[,numeric_cols]
head(df[,numeric_cols])
df.lng <- melt(df[,numeric_cols],id="loan_status")
df1.lng <- melt(df1[,numeric_cols],id="is_bad")
df1.lng <- melt(df1[,numeric_cols],id="loan_status")
df1.lng <- melt(df1[,numeric_cols],id="status_ind")
df1[,numeric_cols]
head(df1[,numeric_cols])
numeric_cols <- sapply(df1,is.numeric)
numeric_cols <- sapply(df,is.numeric)
head(df[,numeric_cols])
df.lng <- melt(df[,numeric_cols],id="status_ind")
head(df.lng)
p <- ggplot(aes(x=value,group=status_ind,colour = factor(status_ind)),data=df.lng)
p+geom_density()+facet_wrap(~variable,scales="free")
names(modFit1)
modFit1$method
modFit2$method
varImp(modFit2)
modFit2
modFit1$modlType
modFit1$modltype
modFit1$modeltype
modFit1$modelType
modFit0$modelType
modFit1$method
modFit1
training <- read.csv("/Users/HimanshuBharara/Desktop/PracticalMachineLearning/pml-training.csv",na.strings = c("NA", "#DIV/0!", ""))
testing <- read.csv("/Users/HimanshuBharara/Desktop/PracticalMachineLearning/pml-testing.csv",na.strings = c("NA", "#DIV/0!", ""))
str(training,len=15)
table(training$classe)
prop.table(table(training$user_name,training$classe),1)
prop.table(table(training$classe))
training <- training[,7:160]
testing <- testing[,7:160]
is_data <- apply(!is.na(training),2,sum) > 19621
training <- training[,is_data]
is_data
testing <- testing[,is_data]
library(caret)
library(ggplot2)
set.seed(3141592)
inTrain <- createDataPartition(y=training$classe,p=0.6,list=FALSE)
train1 <- training[inTrain,]
train2 <- training[-inTrain,]
dim(train1)
dim(train2)
nzv_cols <- nearZeroVar(train1) if(length(nzv_cols>0)) {train1<- train1[,-nzv_cols] train2<-train2[,-nzv_cols]}
nzv_cols <- nearZeroVar(train1)
if(length(nzv_cols)>0){train1 <- train1[,-nzv_cols] train2 <- train2[,-nzv_cols]}
if(length(nzv_cols) > 0) {
train1 <- train1[, -nzv_cols]
train2 <- train2[, -nzv_cols]
}
dim(train1)
dim(Train2)
dim(train2)
library(randomForest)
set.seed(3141592)
fitModel <- randomForest(classe~.,data=train1,importance=TRUE,ntree=100)
varImpPlot(fitModel)
correl <- cor(train1[,c("yaw_belt","roll_belt","num_window","pitch_belt","magnet_dumbbell_z","magnet_dumbbell_y","pitch_forearm","accel_dumbbell_y","roll_arm","roll_forearm")])
diag(correl) <- 0
which(abs(correl)>0.75,arr.ind = TRUE)
cor(train1$roll_belt,train1$yaw_belt)
qplot(roll_belt,magnet_dumbbell_y,colour=classe,data=train1)
library(rpart.plot)
fitModel<-rpart(classe~.,data=train1,method="class")
prp(fitModel)
set.seed(3141592)
fitModel <- train(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,data=train1,method="rf",trControl=trainControl(method="cv",number=2),prox=TRUE,verbose=TRUE,allowParallel=TRUE)
saveRDS(fitModel,"/Users/HimanshuBharara/Desktop/PracticalMachineLearning/modelRF.Rds")
fitModel <- readRDS("/Users/HimanshuBharara/Desktop/PracticalMachineLearning/modelRF.Rds")
predictions <- predict(fitModel,newdata=train2)
confusionMat <- confusionMatrix(predictions,train2$classe)
confusionMat
missClass <- fucntion(values,predicted){sum()
missClass <- fucntion(values,predicted){ sum(predicted!=values)/length(values) }
missClass = function(values, predicted) {
sum(predicted != values) / length(values)
}
OOS_errRate = missClass(train2$classe, predictions)
OOS_errRate
predictions <- predict(fitModel,newdata=testing)
testing$classe
testing$classe <- predictions
submit <- data.frame(problem_id=testing$problem_id,classe=predictions)
write.csv(submit,file="/Users/HimanshuBharara/Desktop/PracticalMachineLearning/coursera-submission.csv",row.names = FALSE)
answers = testing$classe
write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_",i,".txt")
write.table(x[i], file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)
}
}
write_files(answers)
answers = testing$classe
write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("/Users/HimanshuBharara/Desktop/PracticalMachineLearning/problem_",i,".txt")
write.table(x[i], file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)
}
}
write_files(answers)
savehistory("~/Desktop/PracticalMachineLearning/PML_PredictionAssignment.Rhistory")
